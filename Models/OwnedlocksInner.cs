/*
 * Slock Backend
 *
 * This is the api doc for the Slock backend
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class OwnedlocksInner : IEquatable<OwnedlocksInner>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets IsRented
        /// </summary>
        [DataMember(Name="isRented")]
        public bool? IsRented { get; set; }

        /// <summary>
        /// Gets or Sets RentedFromDate
        /// </summary>
        [DataMember(Name="rentedFromDate")]
        public string RentedFromDate { get; set; }

        /// <summary>
        /// Gets or Sets RentedTillDate
        /// </summary>
        [DataMember(Name="rentedTillDate")]
        public string RentedTillDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OwnedlocksInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsRented: ").Append(IsRented).Append("\n");
            sb.Append("  RentedFromDate: ").Append(RentedFromDate).Append("\n");
            sb.Append("  RentedTillDate: ").Append(RentedTillDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OwnedlocksInner)obj);
        }

        /// <summary>
        /// Returns true if OwnedlocksInner instances are equal
        /// </summary>
        /// <param name="other">Instance of OwnedlocksInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OwnedlocksInner other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    IsRented == other.IsRented ||
                    IsRented != null &&
                    IsRented.Equals(other.IsRented)
                ) && 
                (
                    RentedFromDate == other.RentedFromDate ||
                    RentedFromDate != null &&
                    RentedFromDate.Equals(other.RentedFromDate)
                ) && 
                (
                    RentedTillDate == other.RentedTillDate ||
                    RentedTillDate != null &&
                    RentedTillDate.Equals(other.RentedTillDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (IsRented != null)
                    hashCode = hashCode * 59 + IsRented.GetHashCode();
                    if (RentedFromDate != null)
                    hashCode = hashCode * 59 + RentedFromDate.GetHashCode();
                    if (RentedTillDate != null)
                    hashCode = hashCode * 59 + RentedTillDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OwnedlocksInner left, OwnedlocksInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OwnedlocksInner left, OwnedlocksInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
