/*
 * Slock Backend
 *
 * This is the api doc for the Slock backend
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
// using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using Attributes;
using Models;
using api.db;
using System.Threading.Tasks;

namespace Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class LocksApiController : ControllerBase
    { 
        public AppDb Db { get; }
        
        public LocksApiController(AppDb db){
            Db = db;
        }

        /// <summary>
        /// activate a lock
        /// </summary>
        
        /// <param name="lockId"></param>
        /// <param name="token"></param>
        /// <param name="body"></param>
        /// <response code="200">success</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1/locks/{lockId}/activate")]
        [ValidateModelState]
        [SwaggerOperation("LocksLockIdActivatePost")]
        public async Task<IActionResult> LocksLockIdActivatePost([FromRoute][Required]int lockId, [FromHeader][Required()]string token, [FromBody]Lock body)
        { 
            await Db.Connection.OpenAsync();
            // Get lock we want to update
            LockQuerry lq = new LockQuerry(Db);
            var locka = await lq.FindOneAsync(lockId);
            // Update the lock
            locka.Description = body.Description;
            await locka.UpdateAsync();
            
            return new OkObjectResult("Lock updated");
        }

        /// <summary>
        /// change lock details
        /// </summary>
        
        /// <param name="lockId"></param>
        /// <param name="token"></param>
        /// <param name="body"></param>
        /// <response code="200">success</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1/locks/{lockId}/changelockdetails")]
        [ValidateModelState]
        [SwaggerOperation("ChangelockdetailsPost")]
        public async Task<IActionResult> ChangelockdetailsPost([FromRoute][Required]int lockId, [FromHeader][Required()]string token, [FromBody]Lock body)
        {
            await Db.Connection.OpenAsync();
            // Get lock we want to update
            LockQuerry lq = new LockQuerry(Db);
            var locka = await lq.FindOneAsync(lockId);
            // Update the lock
            locka.Description = body.Description;
            await locka.UpdateAsync();
            
            return new OkObjectResult("Lock updated");
        }

        /// <summary>
        /// deactivate a lock so another user can activate it
        /// </summary>
        
        /// <param name="lockId"></param>
        /// <param name="token"></param>
        /// <response code="200">success</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1/locks/{lockId}/deactivate")]
        [ValidateModelState]
        [SwaggerOperation("DeactivatePost")]
        public async Task<IActionResult> DeactivatePost([FromRoute][Required]int lockId, [FromHeader][Required()]string token)
        {
            await Db.Connection.OpenAsync();
            // Get lock we want to update
            LockQuerry lq = new LockQuerry(Db);
            var locka = await lq.FindOneAsync(lockId);
            // Update the lock
            locka.OwnerId = null;
            await locka.UpdateAsync();
            
            return new OkObjectResult("Lock updated");
        }

        /// <summary>
        /// Ticks the ratchet one place further
        /// </summary>
        
        /// <param name="lockId"></param>
        /// <param name="token"></param>
        /// <response code="200">success</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1/locks/{lockId}/ratchettick")]
        [ValidateModelState]
        [SwaggerOperation("IncrementRatchettickGet")]
        public virtual IActionResult IncrementRatchettickGet([FromRoute][Required]string lockId, [FromHeader][Required()]string token)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);


            throw new NotImplementedException();
        }

        /// <summary>
        /// syncs the ratched
        /// </summary>
        
        /// <param name="lockId"></param>
        /// <param name="token"></param>
        /// <param name="body">body with counter and previous token in it</param>
        /// <response code="200">success</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1/locks/{lockId}/ratchettick")]
        [ValidateModelState]
        [SwaggerOperation("LocksLockIdRatchettickPost")]
        public virtual IActionResult LocksLockIdRatchettickPost([FromRoute][Required]string lockId, [FromHeader][Required()]string token, [FromBody]Ratchetsync body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Lend out your lock to one of the users for a predefined time
        /// </summary>
        
        /// <param name="lockId"></param>
        /// <param name="token"></param>
        /// <param name="body"></param>
        /// <response code="200">success</response>
        /// <response code="500">server error</response>
        [HttpPost]
        [Route("/v1/locks/{lockId}/share")]
        [ValidateModelState]
        [SwaggerOperation("ShareLockPost")]
        public async Task<IActionResult> ShareLockPost([FromRoute][Required]int lockId, [FromHeader][Required()]string token, [FromBody]Share body)
        { 
            await Db.Connection.OpenAsync();

            UserQuerry helper = new UserQuerry(Db);
            // helper.
            // Setup stuf to create the new 
            Rented rLock = new Rented(Db);
            rLock.LockId = lockId;
            rLock.Start = body.StartDate;
            rLock.End = body.EndDate;
            rLock.UserId = helper.GetUserByUsername(body.Username).Id;

            await rLock.InsertAsync();

            return new OkObjectResult("Access Granted");
        }

        /// <summary>
        /// get the locks this user has rented
        /// </summary>
        
        /// <param name="lockId"></param>
        /// <param name="token"></param>
        /// <response code="200">TOTP lock token base64</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1/locks/{lockId}/token")]
        [ValidateModelState]
        [SwaggerOperation("LocksLockIdTokenGet")]
        public virtual IActionResult LocksLockIdTokenGet([FromRoute][Required]string lockId, [FromHeader][Required()]string token)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);


            throw new NotImplementedException();
        }

        /// <summary>
        /// get the locks this user owns
        /// </summary>
        
        /// <param name="token"></param>
        /// <response code="200">succes</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1/me/ownedlocks")]
        [ValidateModelState]
        [SwaggerOperation("MeOwnedlocksGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Ownedlocks), description: "succes")]
        public async Task<IActionResult> MeOwnedlocksGet([FromHeader][Required()]string token)
        {
            await Db.Connection.OpenAsync();
            // TODO get onwer id based on token
            LockQuerry manager = new LockQuerry(Db);
            var locks = manager.FindLocksByOwnerAsync(1);

            // return new ObjectResult(locks);
            return new OkObjectResult(locks);
        }

        /// <summary>
        /// get the locks this user has rented
        /// </summary>
        
        /// <param name="token"></param>
        /// <response code="200">succes</response>
        /// <response code="500">server error</response>
        [HttpGet]
        [Route("/v1/me/rentedlockes")]
        [ValidateModelState]
        [SwaggerOperation("MeRentedlockesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Rentedlocks), description: "succes")]
        public virtual IActionResult MeRentedlockesGet([FromHeader][Required()]string token)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Rentedlocks));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            string exampleJson = null;
            exampleJson = "\"\"";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Rentedlocks>(exampleJson)
            : default(Rentedlocks);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// register user to system
        /// </summary>
        
        /// <param name="body">User object that needs to be added to the system</param>
        /// <response code="200">user added</response>
        /// <response code="500">internal server error</response>
        [HttpPost]
        [Route("/v1/addlock")]
        [ValidateModelState]
        [SwaggerOperation("AddLock")]
        public async Task<IActionResult> AddLock([FromBody]Lock body)
        { 
            await Db.Connection.OpenAsync();
            body.Db = Db;
            await body.InsertAsync();
            return new OkObjectResult("Lock succesfully made");
        }
    }
}
